Index: src/main/java/ru/javaops/bootjava/restaurantvoting/model/BaseEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javaops/bootjava/restaurantvoting/model/BaseEntity.java	(date 1550432139682)
+++ src/main/java/ru/javaops/bootjava/restaurantvoting/model/BaseEntity.java	(date 1550432139682)
@@ -0,0 +1,51 @@
+package ru.javaops.bootjava.restaurantvoting.model;
+
+import lombok.*;
+import org.springframework.data.domain.Persistable;
+import org.springframework.data.util.ProxyUtils;
+import org.springframework.util.Assert;
+
+import javax.persistence.*;
+
+@MappedSuperclass
+//  https://stackoverflow.com/a/6084701/548473
+@Access(AccessType.FIELD)
+@Getter
+@Setter
+@NoArgsConstructor(access = AccessLevel.PROTECTED)
+@AllArgsConstructor(access = AccessLevel.PROTECTED)
+@ToString
+public abstract class BaseEntity implements Persistable<Integer> {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    protected Integer id;
+
+    public int id() {
+        Assert.notNull(id, "Entity must has id");
+        return id;
+    }
+
+    @Override
+    public boolean isNew() {
+        return id == null;
+    }
+
+    //    https://stackoverflow.com/questions/1638723
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || !getClass().equals(ProxyUtils.getUserClass(o))) {
+            return false;
+        }
+        BaseEntity that = (BaseEntity) o;
+        return id != null && id.equals(that.id);
+    }
+
+    @Override
+    public int hashCode() {
+        return id == null ? 0 : id;
+    }
+}
\ No newline at end of file
Index: src/main/java/ru/javaops/bootjava/restaurantvoting/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javaops/bootjava/restaurantvoting/model/User.java	(date 1550419353000)
+++ src/main/java/ru/javaops/bootjava/restaurantvoting/model/User.java	(date 1550432080848)
@@ -1,7 +1,6 @@
 package ru.javaops.bootjava.restaurantvoting.model;
 
 import lombok.*;
-import org.springframework.data.jpa.domain.AbstractPersistable;
 
 import javax.persistence.*;
 import javax.validation.constraints.Email;
@@ -16,7 +15,7 @@
 @NoArgsConstructor(access = AccessLevel.PROTECTED)
 @AllArgsConstructor
 @ToString(callSuper = true, exclude = {"password"})
-public class User extends AbstractPersistable<Integer> {
+public class User extends BaseEntity {
 
     @Column(name = "email", nullable = false, unique = true)
     @Email
Index: src/main/java/ru/javaops/bootjava/restaurantvoting/RestaurantVotingApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javaops/bootjava/restaurantvoting/RestaurantVotingApplication.java	(date 1550419353000)
+++ src/main/java/ru/javaops/bootjava/restaurantvoting/RestaurantVotingApplication.java	(date 1550435495113)
@@ -18,6 +18,6 @@
 
     @Override
     public void run(ApplicationArguments args) throws Exception {
-        System.out.println(userRepository.findAll());
+        System.out.println(userRepository.findByLastNameContainingIgnoreCase("last"));
     }
 }
Index: src/main/java/ru/javaops/bootjava/restaurantvoting/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javaops/bootjava/restaurantvoting/repository/UserRepository.java	(date 1550419353000)
+++ src/main/java/ru/javaops/bootjava/restaurantvoting/repository/UserRepository.java	(date 1550435495108)
@@ -1,7 +1,18 @@
 package ru.javaops.bootjava.restaurantvoting.repository;
 
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.transaction.annotation.Transactional;
 import ru.javaops.bootjava.restaurantvoting.model.User;
 
+import java.util.List;
+import java.util.Optional;
+
+@Transactional(readOnly = true)
 public interface UserRepository extends JpaRepository<User, Integer> {
+
+    @Query("SELECT u FROM User u WHERE u.email = LOWER(:email)")
+    Optional<User> findByEmailIgnoreCase(String email);
+
+    List<User> findByLastNameContainingIgnoreCase(String lastName);
 }
\ No newline at end of file
Index: src/main/resources/application.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/application.yaml	(date 1550419353000)
+++ src/main/resources/application.yaml	(date 1550431369395)
@@ -12,7 +12,6 @@
         default_batch_fetch_size: 20
         # https://stackoverflow.com/questions/21257819/what-is-the-difference-between-hibernate-jdbc-fetch-size-and-hibernate-jdbc-batc
         jdbc.batch_size: 20
-        id.new_generator_mappings: false
   datasource:
     # ImMemory
     url: jdbc:h2:mem:voting
